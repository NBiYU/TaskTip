using System.Windows;using System.Windows.Media;using CommunityToolkit.Mvvm.Messaging;using TaskTip.Common;
using TaskTip.Models.DataModel;using TaskTip.Models.SettingModel;using TaskTip.Services;using TaskTip.ViewModels.WindowModel.PopVM;using TaskTip.Views.Windows.PopWindow;using UserControl = System.Windows.Controls.UserControl;namespace TaskTip.Views.UserControls{
    /// <summary>    /// ThemeSelectorUC.xaml µÄ½»»¥Âß¼­    /// </summary>    public partial class ThemeSelectorUC : UserControl    {        private int index;        private bool isRuntimeUpdate;        public string CategoryName;        public GradientBrush CategoryGradientBrush;        public GradientColorModel GradientColor;        public ThemeSelectorUC()        {            InitializeComponent();            Init();        }        public ThemeSelectorUC(GradientColorModel model,bool isUpdate)        {            InitializeComponent();            isRuntimeUpdate = isUpdate;            InitModel(model);            Init();        }        private void InitModel(GradientColorModel model)        {            index = model.ID;            GradientColor = model;            CategoryName = GradientColor.CategoryName;            var colors = new GradientStopCollection();            foreach (var colorItem in GradientColor.ColorModels)            {                if (ColorConverter.ConvertFromString(colorItem.ColorHex) is Color color)                {                    colors.Add(new GradientStop(color, colorItem.Offset));                }            }            CategoryGradientBrush = GradientColor.IsLinear                ? new LinearGradientBrush(colors, new Point(GradientColor.StartX, GradientColor.StartY), new Point(GradientColor.EndX, GradientColor.EndY))                : new RadialGradientBrush(colors);        }        private void Init()        {            this.CategoryNameText.Text = CategoryName;            this.ColorSelector.Background = CategoryGradientBrush;            if(isRuntimeUpdate)
            {
                Application.Current.Resources[GlobalVariable.ThemeStyleKeys[index]] = CategoryGradientBrush;
                WeakReferenceMessenger.Default.Send(new CorrespondenceModel(), Const.CONST_TASK_STYLE_CHANGED);
            }        }        private void ColorSelector_OnClick(object sender, RoutedEventArgs e)        {            var selector = new GradientSelectorView();            var model = new GradientSelectorVM(GradientColor);            selector.DataContext = model;            var result = selector.ShowDialog();            if (result == true)            {                CategoryGradientBrush = model.PreviewRectangle;                GradientColor.ColorModels.Clear();                foreach (var gradientStop in CategoryGradientBrush.GradientStops)                {                    GradientColor.ColorModels.Add(new ColorModel()                    {                        ColorHex = gradientStop.Color.ToString(),                        Offset = gradientStop.Offset                    });                }                GradientColor.StartX = double.Parse(model.StartPointX);                GradientColor.StartY = double.Parse(model.StartPointY);                GradientColor.EndX = double.Parse(model.EndPointX);                GradientColor.EndY = double.Parse(model.EndPointY);                GradientColor.IsLinear = model.IsLinear;                Init();            }        }    }}