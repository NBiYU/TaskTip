using CommunityToolkit.Mvvm.Messaging;using System;using System.Collections.Generic;using System.Configuration;using System.Linq;using System.Windows;using System.Windows.Input;using TaskTip.Common;using TaskTip.Services;using TaskTip.ViewModels.WindowModel.PopVM;using static System.Int32;using MessageBox = System.Windows.MessageBox;namespace TaskTip.Views.Windows.PopWindow{    /// <summary>    /// FictionReadView.xaml 的交互逻辑    /// </summary>    public partial class FictionReadView : Window    {        public static Dictionary<string, HotKeyManager> HotKeyManagers=new();        public FictionReadView()        {            InitializeComponent();            if (HotKeyManagers.Count != 0) throw new Exception("请不要在非书籍地方创建该窗口");            RegisterHotKey();        }        private void FictionReadView_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e)        {            try            {                base.DragMove();            }            catch (Exception ex)            {            }        }        private void RegisterHotKey()        {            try            {                #region 获取热键值                var relevancyName = GlobalVariable.JsonConfiguration.TryGetValue<List<dynamic>>("HotKeys:ReadUIHotKeys");                var hideKeys = Array.ConvertAll<string, int>(((string)relevancyName.First(x => x.HotKeyName == Const.CONST_HOT_KEY_HIDE).KeyASCII).Split("+"), converter: int.Parse);                var showKeys = Array.ConvertAll<string, int>(((string)relevancyName.First(x => x.HotKeyName == Const.CONST_HOT_KEY_SHOW).KeyASCII).Split("+"), converter: int.Parse);                var closeKeys = Array.ConvertAll<string, int>(((string)relevancyName.First(x => x.HotKeyName == Const.CONST_HOT_KEY_CLOSE).KeyASCII).Split("+"), converter: int.Parse);                var previewKeys = Array.ConvertAll<string, int>(((string)relevancyName.First(x => x.HotKeyName == Const.CONST_HOT_KEY_PREVIEW).KeyASCII).Split("+"), converter: int.Parse);                var nextKeys = Array.ConvertAll<string, int>(((string)relevancyName.First(x => x.HotKeyName == Const.CONST_HOT_KEY_NEXT).KeyASCII).Split("+"), converter: int.Parse);                var autoReadKeys = Array.ConvertAll<string, int>(((string)relevancyName.First(x => x.HotKeyName == Const.CONST_HOT_KEY_AUTO_READ).KeyASCII).Split("+"), converter: int.Parse);                #endregion                #region 注册热键                HotKeyManagers.Add(Const.CONST_HOT_KEY_SHOW, new HotKeyManager(this, (Key)showKeys[1], (ModifierKeys)showKeys[0], (o, e) =>                {                    if (!this.IsVisible) this.Show();                }));                HotKeyManagers.Add(Const.CONST_HOT_KEY_HIDE, new HotKeyManager(this, (Key)hideKeys[1], (ModifierKeys)hideKeys[0], (o, e) =>                {                    if(this.IsVisible) this.Hide();                }));                HotKeyManagers.Add(Const.CONST_HOT_KEY_CLOSE, new HotKeyManager(this, (Key)closeKeys[1], (ModifierKeys)showKeys[0], (o, e) =>                {                    this.Close();                }));                HotKeyManagers.Add(Const.CONST_HOT_KEY_NEXT, new HotKeyManager(this, (Key)nextKeys[1], (ModifierKeys)nextKeys[0], action: (o, e) =>                {                    if (this is FictionReadView readView)                    {                        var vm = readView.DataContext as FictionReadVM;                        vm.RightTransform();                    }                }));                HotKeyManagers.Add(Const.CONST_HOT_KEY_PREVIEW, new HotKeyManager(this, (Key)previewKeys[1], (ModifierKeys)previewKeys[0], action: (o, e) =>                {                    if (this is FictionReadView readView)                    {                        var vm = readView.DataContext as FictionReadVM;                        vm.LeftTransform();                    }                }));                HotKeyManagers.Add(Const.CONST_HOT_KEY_AUTO_READ, new HotKeyManager(this, (Key)autoReadKeys[1], (ModifierKeys)autoReadKeys[0], action: (o, e) =>                {                    if (this is FictionReadView readView)                    {                        var vm = readView.DataContext as FictionReadVM;                        vm.AutoReadMode();                    }                }));                WeakReferenceMessenger.Default.Register<string,string>(this,Const.CONST_HOT_KEY_RE_REGISTER, (o, e) =>                {                    UnRegisterHotKey();                    RegisterHotKey();                });                #endregion            }            catch (Exception ex)            {                MessageBox.Show("注册热键异常！！！");                UnRegisterHotKey();            }        }        private void UnRegisterHotKey()        {            foreach (var hotKey in HotKeyManagers.Values)            {                hotKey.Dispose();            }            HotKeyManagers.Clear();            WeakReferenceMessenger.Default.Unregister<string>(this);        }        private void FictionReadView_OnClosed(object? sender, EventArgs e)        {            UnRegisterHotKey();        }    }}