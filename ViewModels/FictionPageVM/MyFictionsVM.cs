using CommunityToolkit.Mvvm.ComponentModel;using CommunityToolkit.Mvvm.Input;using Newtonsoft.Json;using System;
using System.Collections.Generic;using System.Collections.ObjectModel;using System.IO;using System.Linq;using System.Windows;
using System.Windows.Media.Imaging;
using TaskTip.Services;using TaskTip.Views.FictionPage;using TaskTipProject.Models;namespace TaskTip.ViewModels.FictionPageVM{    internal partial class MyFictionsVM:ObservableObject    {        private Visibility _descVisibility;        public Visibility DescVisibility
        {
            get=> _descVisibility;
            set=> SetProperty(ref _descVisibility, value);
        }        private ObservableCollection<FictionItemUC> _fictionItem;        public ObservableCollection<FictionItemUC> FictionItems        {            get => _fictionItem;            set
            {                SetProperty(ref _fictionItem, value);
                DescVisibility = _fictionItem.Count == 0 ? Visibility.Visible : Visibility.Collapsed;
            }        }        [RelayCommand]        private void ReadMyFictionProgress()        {            var tempCollection = new List<FictionItemUC>();            var path = GlobalVariable.FictionProgressPath;            if (!File.Exists(path)) return;                        var content = File.ReadAllText(path);            if (string.IsNullOrEmpty(content)) return;            var obj = JsonConvert.DeserializeObject<List<FictionProgressModel>>(content);            if (obj is { Count: > 0 })            {                foreach (var item in obj)                {                    tempCollection.Add(AddUC(item));                }            }            FictionItems = new ObservableCollection<FictionItemUC>(tempCollection);        }        private FictionItemUC AddUC(FictionProgressModel item)        {            var control = new FictionItemUC(item);            control.ItemClick += (o, e) => { };            control.ItemDelete += (o, e) =>            {                if (o is FictionProgressModel model)                {                    var progress = string.Empty;                    var saveProgress = new List<FictionProgressModel>();                    if (File.Exists(GlobalVariable.FictionProgressPath))                    {                        progress = File.ReadAllText(GlobalVariable.FictionProgressPath);                    }                    if (!string.IsNullOrEmpty(progress))                    {                        var objList = JsonConvert.DeserializeObject<List<FictionProgressModel>>(progress);                        if (objList is { Count: > 0 })                            saveProgress.AddRange(objList);                    }                    saveProgress.RemoveAll(x => x.Id == model.Id);                    File.WriteAllText(GlobalVariable.FictionProgressPath, JsonConvert.SerializeObject(saveProgress, Formatting.Indented));                    FictionItems.Remove(FictionItems.FirstOrDefault(x => x.FictionName.Text == model.Title));
                    Directory.Delete(Path.Combine(GlobalVariable.FictionCachePath, model.Id), true);


                }            };            return control;        }        public MyFictionsVM()        {            ReadMyFictionProgress();        }    }}