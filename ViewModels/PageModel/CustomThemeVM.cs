using System;using System.Collections.Generic;using System.Collections.ObjectModel;using System.IO;using System.Linq;using System.Windows;using System.Windows.Forms;using System.Windows.Media;using CommunityToolkit.Mvvm.Input;using Microsoft.Extensions.Configuration;using Newtonsoft.Json;using TaskTip.Base;using TaskTip.Models;using TaskTip.Services;using TaskTip.Views.UserControls;using TaskTip.Views.Windows;using Exception = System.Exception;using MessageBox = HandyControl.Controls.MessageBox;using TextBox = HandyControl.Controls.TextBox;namespace TaskTip.ViewModels.PageModel{    public partial class CustomThemeVM : BaseVM    {        #region  属性        private string _selectThemeName;        public string SelectThemeName        {            get => _selectThemeName;            set => SetProperty(ref _selectThemeName, value);        }        private string _notifyThemeName;        public string NotifyThemeName        {            get => _notifyThemeName;            set => SetProperty(ref _notifyThemeName, value);        }        private bool _isCustom = false;        public bool IsCustom        {            get => _isCustom;            set            {                SetProperty(ref _isCustom, value);                CustomVisibility = value ? Visibility.Visible : Visibility.Collapsed;            }        }        private Visibility _customVisibility;        public Visibility CustomVisibility        {            get => _customVisibility;            set => SetProperty(ref _customVisibility, value);        }        private List<ThemeModel> Themes { get; set; } = new();        private ObservableCollection<string> _themesCollection = new();        public ObservableCollection<string> ThemesCollection        {            get => _themesCollection;            set => SetProperty(ref _themesCollection, value);        }        private ObservableCollection<ThemeSelectorUC> _customThemesList = new();        public ObservableCollection<ThemeSelectorUC> CustomThemesList        {            get => _customThemesList;            set => SetProperty(ref _customThemesList, value);        }        #endregion        #region 指令        [RelayCommand]        public void NewTheme()        {            try            {                var theme = GetDefaultData();                AddTheme(theme);                ThemeChanged(theme[0].ThemeName);            }            catch (Exception ex)            {                MessageBox.Show($"程序异常：{ex}");            }        }        [RelayCommand]        public void LoadTheme()        {            try            {                var selectFile = new System.Windows.Forms.OpenFileDialog()                {                    Filter = "(主题配置文件) | *.json"                };                var selectResult = selectFile.ShowDialog();                if (selectResult == DialogResult.OK)                {                    var errMsg = string.Empty;                    if (string.IsNullOrEmpty(selectFile.FileName)) errMsg += $"文件名为空\n";                    if (!selectFile.CheckFileExists) errMsg += $"{selectFile.FileName} 文件不存在\n";                    if (!string.IsNullOrEmpty(errMsg))                    {                        MessageBox.Show(errMsg);                        return;                    }                    try                    {                        var fileText = File.ReadAllText(selectFile.FileName);                        var content = JsonConvert.DeserializeObject<ThemeModel>(fileText);                        if (content == null)                        {                            MessageBox.Show($"{selectFile.FileName} 文件解析失败");                            return;                        }                        // 如果主题名称已存在，提示修改                        if (ThemesCollection.Contains(content.ThemeName))                        {                            var window = new PopView()                            {                                TipMessage =                                {                                    Text = "当前主题名称已存在：",                                    FontSize = 15                                },                                Layout =                                {                                    Content = new TextBox()                                    {                                        Text = content.ThemeName,                                        Height = 40,                                        Margin = new Thickness(10),                                        ToolTip= "请输入主题新名称"                                    }                                },                            };                            window.PopConfirm += (o, args) =>                            {                                var newThemeName = ((TextBox)window.Layout.Content).Text;                                if (string.IsNullOrEmpty(newThemeName))                                {                                    MessageBox.Show("名称不能为空!!");                                    return;                                }                                if (ThemesCollection.Contains(newThemeName))                                {                                    MessageBox.Show("当前主题名称已存在，请重新输入");                                    return;                                }                                window.DialogResult = true;                                MessageBox.Show($"读取\"{newThemeName}\"成功，请记得保存");                            };                            var inputResult = window.ShowDialog();                            if (inputResult == true)                            {                                content.ThemeName = ((TextBox)window.Layout.Content).Text;                            }                            else                            {                                return;                            }                        }                        Themes.Add(content);                        ThemesCollection.Add(content.ThemeName);                        SelectThemeName = content.ThemeName;                    }                    catch (Exception e)                    {                        return;                    }                }            }            catch (Exception ex)            {                MessageBox.Show($"程序异常：{ex}");            }        }        [RelayCommand]        public void SaveTheme()        {            try            {                if (MessageBox.Show($"是否确认保存{SelectThemeName}主题", "保存", MessageBoxButton.YesNo) !=                    MessageBoxResult.Yes) return;                if (ThemesCollection.Where(x => x == NotifyThemeName).ToList().Count > 1)                {                    MessageBox.Show($"当前已存在{NotifyThemeName}主题命名，请重新命名");                    return;                }                var saveTargetTheme = Themes.First(x => x.ThemeName == SelectThemeName);                var saveCategoryThemes = CustomThemesList.Select(x => x.GradientColor).ToList();                saveTargetTheme.CategoryThemes = saveCategoryThemes;                saveTargetTheme.ThemeName = NotifyThemeName;                var saveTargetThemeNameIdx = ThemesCollection.IndexOf(SelectThemeName);                ThemesCollection.Insert(saveTargetThemeNameIdx, NotifyThemeName);                ThemesCollection.Remove(SelectThemeName);                SelectThemeName = NotifyThemeName;                var customThemes = Themes.Where(x => x.IsCustom == IsCustom).ToList();                //todo 测试阶段，暂不另存，直接保存默认                if (IsCustom)                {                    File.WriteAllText(GlobalVariable.CustomThemePath, JsonConvert.SerializeObject(customThemes, Formatting.Indented));                }                else                {                    GlobalVariable.JsonConfiguration["Themes:Default", customThemes.GetType()] = customThemes;                }                //GlobalVariable.JsonConfiguration["Themes:Default", customThemes.GetType()] = Themes;                MessageBox.Show($"保存{saveTargetTheme.ThemeName}成功");            }            catch (Exception ex)            {                MessageBox.Show($"程序异常：{ex}");            }        }        [RelayCommand]        public void OutThemeFile()        {            try            {                var theme = Themes.FirstOrDefault(x => x.ThemeName == SelectThemeName);                var json = JsonConvert.SerializeObject(theme, Formatting.Indented);                var desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);                var filePath = Path.Combine(desktopPath, SelectThemeName) + ".json";                if (File.Exists(filePath))                {                    if (MessageBox.Show($"当前已存在{SelectThemeName}的文件，是否覆盖", "覆盖文件", MessageBoxButton.YesNo) !=                        MessageBoxResult.Yes) return;                }                File.WriteAllText(filePath, json);                MessageBox.Show($"{SelectThemeName}文件成功导出");            }            catch (Exception ex)            {                MessageBox.Show($"程序异常：{ex}");            }        }        [RelayCommand]        public void ThemeChanged(object sender)        {            try            {                if (sender is string themeName)                {                    var theme = Themes.First(x => x.ThemeName == themeName);                    LoadedThemeItemList(theme);                    GlobalVariable.JsonConfiguration["Themes:CurrentThemeName", SelectThemeName.GetType()] = SelectThemeName;                }            }            catch (Exception ex)            {                MessageBox.Show($"程序异常：{ex}");            }        }        #endregion        #region 功能函数        private ThemeSelectorUC AddThemeItem(GradientColorModel model)        {            var control = new ThemeSelectorUC(model);            control.ThemeSelectUCGrid.IsEnabled = IsCustom;            return control;        }        private void LoadedThemeItemList(ThemeModel theme)        {            if (theme == null)            {                ExecuteLogger("【自定义主题】【加载配置异常】无可加载配置", true);                theme = Themes[0];            }            SelectThemeName = theme.ThemeName;            NotifyThemeName = theme.ThemeName;            IsCustom = theme.IsCustom;            CustomThemesList.Clear();            var list = theme.CategoryThemes.OrderBy(x => x.ID).ToList();            foreach (GradientColorModel item in list)            {                CustomThemesList.Add(AddThemeItem(item));            }        }        #region 配置读写        private void CustomThemeJsonFileRead()        {            if (!File.Exists(GlobalVariable.CustomThemePath)) return;            var json = File.ReadAllText(GlobalVariable.CustomThemePath);            if (string.IsNullOrEmpty(json)) return;            try            {                var customTheme = JsonConvert.DeserializeObject<List<ThemeModel>>(json);                if (customTheme == null) return;                AddTheme(customTheme);            }            catch (Exception e)            {                ExecuteLogger($"【自定义主题】【读取自定义主题】【读取失败】内容：{json}\n异常信息：{e.Message}");            }        }        private void DefaultThemeRead()        {            try            {                var defaultTheme = GlobalVariable.JsonConfiguration.GetSection("Themes:Default").Get<List<ThemeModel>>();                if (defaultTheme == null) return;                AddTheme(defaultTheme);            }            catch (Exception e)            {                ExecuteLogger($"【自定义主题】【读取默认主题】【读取异常】\n异常信息：{e.Message}");            }        }        private void AddTheme(List<ThemeModel> themes)        {            Themes.AddRange(themes);            foreach (var theme in themes)            {                ThemesCollection.Add(theme.ThemeName);            }        }        #endregion        #endregion        #region 初始化        private List<ThemeModel> GetDefaultData()        {            var colorModels = new List<ColorModel>()            {                new ColorModel()                {                    ColorHex = Colors.White.ToString(),                    Offset = 0.2                }            };            return new List<ThemeModel>()            {                new ThemeModel()                {                    ThemeName = "自定义主题" + (ThemesCollection.Count(x=>x.Contains("自定义主题")) + 1),                    IsCustom = true,                    CategoryThemes = new List<GradientColorModel>()                    {                        new GradientColorModel()                        {                            CategoryName = "界面主题",                            ID=0,                            IsLinear = true,                            StartX = 0,                            StartY = 0,                            EndX = 1,                            EndY = 1,                            ColorModels = colorModels                        },                        new GradientColorModel()                        {                            CategoryName = "任务正在执行",                            ID=1,                            IsLinear = true,                            StartX = 0,                            StartY = 0,                            EndX = 1,                            EndY = 1,                            ColorModels = colorModels                        },                        new GradientColorModel()                        {                            CategoryName = "任务超时",                            ID=2,                            IsLinear = true,                            StartX = 0,                            StartY = 0,                            EndX = 1,                            EndY = 1,                            ColorModels = colorModels                        },                        new GradientColorModel()                        {                            CategoryName = "无任务计划",                            ID=3,                            IsLinear = true,                            StartX = 0,                            StartY = 0,                            EndX = 1,                            EndY = 1,                            ColorModels = colorModels                        },                        new GradientColorModel()                        {                            CategoryName = "任务完成",                            ID=4,                            IsLinear = true,                            StartX = 0,                            StartY = 0,                            EndX = 1,                            EndY = 1,                            ColorModels = colorModels                        },                        //new GradientColorModel()                        //{                        //    CategoryName = "字体颜色",                        //    ID=5,                        //    IsLinear = true,                        //    StartX = 0,                        //    StartY = 0,                        //    EndX = 1,                        //    EndY = 1,                        //    ColorModels = new List<ColorModel>()                        //    {                        //        new ColorModel()                        //        {                        //            ColorHex = Colors.Black.ToString(),                        //            Offset = 1                        //        }                        //    }                        //}                    }                }            };        }        public CustomThemeVM()        {            //AddTheme(GetTestData()); //Test            DefaultThemeRead();            CustomThemeJsonFileRead();            //ThemesCollection.Add("一");            var currentThemeName = GlobalVariable.JsonConfiguration["Themes:CurrentThemeName"];            LoadedThemeItemList(Themes.FirstOrDefault(x => x.ThemeName == currentThemeName));        }        #endregion    }}