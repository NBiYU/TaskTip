//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能导致不正确的行为，并在以下条件下丢失:
//     代码重新生成。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SyncDataService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResModel", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Models")]
    public partial class ResModel : object
    {
        
        private string ContentField;
        
        private string MessageField;
        
        private bool ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content
        {
            get
            {
                return this.ContentField;
            }
            set
            {
                this.ContentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SyncDataService.ISyncDataService")]
    public interface ISyncDataService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetTaskInfo", ReplyAction="http://tempuri.org/ISyncDataService/GetTaskInfoResponse")]
        System.Threading.Tasks.Task<SyncDataService.ResModel> GetTaskInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetFictionInfo", ReplyAction="http://tempuri.org/ISyncDataService/GetFictionInfoResponse")]
        System.Threading.Tasks.Task<SyncDataService.ResModel> GetFictionInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetRecordInfo", ReplyAction="http://tempuri.org/ISyncDataService/GetRecordInfoResponse")]
        System.Threading.Tasks.Task<SyncDataService.ResModel> GetRecordInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetMenuInfo", ReplyAction="http://tempuri.org/ISyncDataService/GetMenuInfoResponse")]
        System.Threading.Tasks.Task<SyncDataService.ResModel> GetMenuInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetWorkTimeInfo", ReplyAction="http://tempuri.org/ISyncDataService/GetWorkTimeInfoResponse")]
        System.Threading.Tasks.Task<SyncDataService.ResModel> GetWorkTimeInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/PostConfigPath", ReplyAction="http://tempuri.org/ISyncDataService/PostConfigPathResponse")]
        System.Threading.Tasks.Task<SyncDataService.ResModel> PostConfigPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetCurrentConfig", ReplyAction="http://tempuri.org/ISyncDataService/GetCurrentConfigResponse")]
        System.Threading.Tasks.Task<SyncDataService.ResModel> GetCurrentConfigAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ISyncDataServiceChannel : SyncDataService.ISyncDataService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class SyncDataServiceClient : System.ServiceModel.ClientBase<SyncDataService.ISyncDataService>, SyncDataService.ISyncDataService
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SyncDataServiceClient() : 
                base(SyncDataServiceClient.GetDefaultBinding(), SyncDataServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISyncDataService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SyncDataServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SyncDataServiceClient.GetBindingForEndpoint(endpointConfiguration), SyncDataServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SyncDataServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SyncDataServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SyncDataServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SyncDataServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SyncDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<SyncDataService.ResModel> GetTaskInfoAsync()
        {
            return base.Channel.GetTaskInfoAsync();
        }
        
        public System.Threading.Tasks.Task<SyncDataService.ResModel> GetFictionInfoAsync()
        {
            return base.Channel.GetFictionInfoAsync();
        }
        
        public System.Threading.Tasks.Task<SyncDataService.ResModel> GetRecordInfoAsync()
        {
            return base.Channel.GetRecordInfoAsync();
        }
        
        public System.Threading.Tasks.Task<SyncDataService.ResModel> GetMenuInfoAsync()
        {
            return base.Channel.GetMenuInfoAsync();
        }
        
        public System.Threading.Tasks.Task<SyncDataService.ResModel> GetWorkTimeInfoAsync()
        {
            return base.Channel.GetWorkTimeInfoAsync();
        }
        
        public System.Threading.Tasks.Task<SyncDataService.ResModel> PostConfigPathAsync(string path)
        {
            return base.Channel.PostConfigPathAsync(path);
        }
        
        public System.Threading.Tasks.Task<SyncDataService.ResModel> GetCurrentConfigAsync()
        {
            return base.Channel.GetCurrentConfigAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISyncDataService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISyncDataService))
            {
                return new System.ServiceModel.EndpointAddress("http://127.0.0.1:8085/SyncDataService.svc");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SyncDataServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISyncDataService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SyncDataServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISyncDataService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISyncDataService,
        }
    }
}
